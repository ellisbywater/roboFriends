{"version":3,"sources":["components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Header","nextProps","nextState","react_default","a","createElement","className","Component","Card","_ref","id","name","email","src","concat","alt","CardList","robots","map","robot","components_Card","key","SearchBox","searchChange","searchField","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","padding","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","React","App","onRequestRobots","_this$props","onSearchChange","isPending","length","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","text","target","value","console","log","payload","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","undefined","action","objectSpread","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9e45b4c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false\n    }\n\n    render(){\n        return <h1 className='f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header","import React from 'react'\n\nconst Card = ({id, name, email}) => {\n    return (\n        <div className=\"tc w-20 grow bg-light-green br3 pa3 ma2 dib bw1 shadow-3\">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"Robots\"/>\n            <div>\n                <h2 className=\"truncate-m\">{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n    return (\n        <div className=\"flex flex-wrap justify-center\">\n            {robots.map(robot => {\n                return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n            })}\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({searchChange, searchField}) => {\n    return (\n        <div className='pa2 ma2'>\n             <input\n                 aria-label='Search Robots'\n                className='pa3 br2 tc ba b--green bg-lightest-blue'\n                type=\"search\"\n                placeholder=\"Search Robots\"\n                onChange={searchChange}\n                 />\n        </div>    \n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px', padding: '15px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React from 'react'\n\nclass ErrorBoundry extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n    }\n    \n    render(){\n        if(this.state.hasError){\n            return <h1>Oops. that is not good</h1>\n        }\n\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry","import React from 'react'\nimport Header from '../components/Header'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport { connect } from 'react-redux'\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            robots : []\n        }\n    }\n\n    componentDidMount() {\n        this.props.onRequestRobots()\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props\n        if (robots.length === 0) { return <h2>Loading...</h2> }\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n\n        return isPending\n            ? <h1 className=\"tc\">Loading... </h1>\n            : (\n                <div className='tc'>\n                    <Header/>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants'\n\nexport const setSearchField = (text) => {\n    console.log(text)\n    return {\n        type: CHANGE_SEARCHFIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response  => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD'\n\n// ASYNC CONSTANTS\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCHFIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from './constants'\n\nconst initialStateSearch = {\n    searchField: ' '\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCHFIELD:\n            return {...state, searchField: action.payload}\n        default:\n            return state\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\nimport \"tachyons\"\nimport { searchRobots, requestRobots } from './reducers'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}